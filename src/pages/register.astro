---
export const prerender = false;

import MainLayout from '../layouts/MainLayout.astro';
import { config } from 'dotenv';

config(); // Load environment variables

const MONGO_URI = process.env.MONGO_URI || '';
if (!MONGO_URI) {
  throw new Error('MONGO_URI is not defined in the environment variables.');
}

// Check if the user is already logged in
const cookies = Astro.request.headers.get('cookie') || '';
const isLoggedIn = cookies.includes('loggedIn=true');
if (isLoggedIn) {
  return Astro.redirect('/'); // Redirect to the homepage if logged in
}
---
<MainLayout>
  <div class="container">
    <div class="info-container">
      <h1>¿Ya tienes cuenta?</h1>
      <p>Inicia sesión para continuar.</p>
      <button onclick="window.location.href='/login'">Iniciar Sesión</button>
    </div>
    <div class="divider"></div>
    <div class="form-container">
      <form id="registerForm" method="POST">
        <h2>Registro</h2>
        <div class="input-group">
          <span class="icon"><i class="fas fa-user"></i></span>
          <input name="username" type="text" placeholder="Usuario" required />
        </div>
        <div class="input-group">
          <span class="icon"><i class="fas fa-envelope"></i></span>
          <input name="email" type="email" placeholder="Email" required />
        </div>
        <div class="input-group">
          <span class="icon"><i class="fas fa-lock"></i></span>
          <input name="password" type="password" placeholder="Contraseña" required />
        </div>
        <button type="submit">Registrate</button>
      </form>
    </div>
  </div>
  <script>
    async function handleRegister(event: SubmitEvent) {
      event.preventDefault();
      const formData = new FormData(event.target as HTMLFormElement);
      const user = {
        username: formData.get('username'),
        email: formData.get('email'),
        password: formData.get('password'),
      };

      try {
        const response = await fetch('/api/auth/register', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(user),
        });
        if (response.ok) {
          const data = await response.json();
          document.cookie = `loggedIn=true; path=/;`;
          document.cookie = `username=${data.username}; path=/;`;
          window.location.href = "/"; // Redirect to the homepage
        } else {
          alert('Failed to register user.');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Failed to register user.');
      }
    }

    const registerForm = document.getElementById('registerForm');
    if (registerForm) {
      registerForm.addEventListener('submit', handleRegister);
    } else {
      console.error("Register form not found.");
    }
  </script>
  <style>
    body {
      background-color: #1a1a1a;
      color: #f0f0f0;
      font-family: Arial, sans-serif;
      margin: 0;
      display: flex;
      flex-direction: column;
      min-height: 100vh;
    }
    .container {
      display: flex;
      justify-content: center;
      align-items: flex-start;
      gap: 0;
      margin: 50px auto;
      max-width: 800px;
      position: relative;
      background-color: #333333;
      border-radius: 5px;
      overflow: hidden;
      opacity: 0;
      transform: translateY(20px);
      animation: fadeIn 0.8s ease-out forwards;
    }
    .form-container, .info-container {
      flex: 1;
      padding: 20px;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      text-align: center;
      opacity: 0;
      transform: translateY(20px);
      animation: fadeIn 0.8s ease-out forwards;
    }
    .info-container {
      animation-delay: 0.3s;
    }
    .form-container {
      animation-delay: 0.6s;
    }
    .divider {
      width: 2px;
      background-color: #444444;
      height: auto;
      margin: 0 10px;
    }
    form {
      width: 100%;
      max-width: 400px;
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    h2 {
      text-align: center;
      margin-bottom: 20px;
    }
    .input-group {
      position: relative;
      width: 100%;
      margin-bottom: 15px;
    }
    .input-group .icon {
      position: absolute;
      top: 50%;
      left: 10px;
      transform: translateY(-50%);
      font-size: 1.2rem;
      color: #e67e22;
    }
    .input-group input {
      width: 100%;
      padding: 10px 10px 10px 35px; /* Add padding to make space for the icon */
      border: 1px solid #555555;
      border-radius: 5px;
      background-color: #2a2a2a;
      color: #f0f0f0;
      box-sizing: border-box;
    }
    .input-group input:focus {
      outline: 2px solid #e67e22;
    }
    button {
      width: 100%;
      padding: 10px;
      background-color: #e67e22;
      border: none;
      border-radius: 5px;
      color: #ffffff;
      cursor: pointer;
      font-size: 1rem;
      transition: background-color 0.3s ease, transform 0.2s ease;
    }
    button:hover {
      background-color: #d35400;
      transform: scale(1.05);
    }
    .info-container button {
      padding: 10px 20px;
      background-color: #e67e22;
      border: none;
      border-radius: 5px;
      color: #ffffff;
      cursor: pointer;
      font-size: 1rem;
      transition: background-color 0.3s ease, transform 0.2s ease;
    }
    .info-container button:hover {
      background-color: #d35400;
      transform: scale(1.05);
    }
    @keyframes fadeIn {
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    @media (max-width: 768px) {
      .container {
        flex-direction: column;
        align-items: stretch;
      }
      .divider {
        display: none;
      }
      form {
        padding: 15px;
      }
      input, button {
        padding: 8px;
      }
    }
    @media (max-width: 480px) {
      h2 {
        font-size: 1.5rem;
      }
      form {
        padding: 10px;
      }
    }
  </style>
</MainLayout>